#+TITLE: Literate Emacs Config
#+PROPERTY: header-args :tangle init.el 
#+STARTUP: showeverything
#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:0 path:http://thomasf.github.io/solarized-css/org-info.min.js
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-dark.min.css" />

* About this config
This is my GNU Emacs literate config file written in org-mode. Its heavily documentated for that reason. 

This is still very much a work in progress project, but its in a pretty usable state. I was a spacemacs user for a few months before deciding to start using this personal config for Emacs so some of its keybindings are heavily influenced by spacemacs (for example Space Space opens the "M-x" menu).

Note that I know little to no elisp, so some things are probably not done in the most efficient way possible, but everything I have set has its desired behaviour, which is enough for me.

This is how my Emacs currently looks, and because I didnt know what file to screenshot, have my qtile bar's config
[[https://github.com/AuroraDragoon/Dotfiles/blob/master/screenshots/python_environment.png]]

I hope you will find something useful here that you can put to your emacs config as well. Enjoy!!

* Packages
Setting up my packages to work properly. 
The first section has to do with MELPA packages and the second with packages installed manually to my load path.
#+BEGIN_SRC elisp

  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (let ((default-directory  "~/.emacs.d/libs/"))
    (normal-top-level-add-to-load-path '("."))
    (normal-top-level-add-subdirs-to-load-path))

#+END_SRC

* Sensible Defaults
Change some Emacs defaults to things I consider more sensible.
This includes: 
+ Setting my theme to solarized-dark (my favourite theme).
+ Disabling some features which I dislike personally like the bars that comes by default, and the annoying sounds emacs makes when you type sth wrong.
+ Activating which-key-mode, which is a popup prompt to display how to complete an emacs command.
+ Changing the startup screen to dired because I consider it way more productive than the default.
+ Making the M-x menu a helm menu which I consider much better than the default
+ Activating ide-mode which amplifies most menus by displaying available autocompletes

#+BEGIN_SRC elisp

  (load-theme 'solarized-dark t)

  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (tool-bar-mode -1)
  (setq ring-bell-function 'ignore)

  (which-key-mode 1)

  (setq inhibit-startup-screen t)
  (add-hook 'after-init-hook 'dired-jump)

  (global-set-key (kbd "M-x") 'helm-M-x)

  (ido-mode 1)

#+END_SRC

* Utilities
General utilities that I want enabled when editing, or changes to the way emacs opens some programs.
This enables:
+ Force all .m files to open in octave mode (Had, some problems with certain files).
+ When adding a bracket or quote add its pair as well for quicker editing.
+ When the cursor is on one bracket, highlight its matching bracket.
+ Enabling yasnippet snippets.

#+BEGIN_SRC elisp

(add-to-list 'auto-mode-alist '("\\.m\\'" . octave-mode))

(show-paren-mode 1)
(electric-pair-mode 1)

(add-to-list 'load-path
	     "~/.emacs.d/plugins/yasnippet")
(require 'yasnippet)
(yas-global-mode 1)

#+END_SRC

* Evil Mode
Enabling Evil Mode, my preffered editing mode for Emacs, with the evil-collection and evil-leader packages loaded. They help me with defining evil type keybindings for more programs, which I like.

#+BEGIN_SRC elisp

  (setq evil-collection-setup-minibuffer t)
  (setq evil-want-keybinding nil)
  (when (require 'evil-collection nil t)
    (evil-collection-init))

  (unless (package-installed-p 'evil)
    (package-install 'evil))

  (require 'evil-leader)
  (global-evil-leader-mode)

  (require 'evil)
  (evil-mode 1)

  (require 'evil-org)
  (add-hook 'org-mode-hook 'evil-org-mode)
  (evil-org-set-key-theme '(navigation insert textobjects additional calendar))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys)

#+END_SRC

* PDF Tools

Configuration for PDF-tools, my favourite built-in Emacs pdf viewer. I set it as the default pdf viewer for Emacs and define vim motion keys inside it. I also enable the midnight minor mode for it as it makes its background theme solarized, which I like. I also define the key "m" as the toggle for dark/light mode in the pdf.

#+BEGIN_SRC elisp

    (use-package pdf-tools
      :mode (("\\.pdf\\'" . pdf-view-mode))
      :config
      (progn
	(pdf-tools-install))
      ;;:hook
      ;;(pdf-view-mode . (lambda () (local-set-key (kbd "p") #'pdf-view-goto-page)))
      ;;(pdf-view-mode . (lambda () (local-set-key (kbd "K") #'pdf-view-previous-line-or-previous-page)))
      ;;(pdf-view-mode . (lambda () (local-set-key (kbd "k") #'pdf-view-scroll-down-or-previous-page)))
      ;;(pdf-view-mode . (lambda () (local-set-key (kbd "j") #'pdf-view-scroll-up-or-next-page)))
      ;;(pdf-view-mode . (lambda () (local-set-key (kbd "h") #'pdf-view-previous-page)))
      ;;(pdf-view-mode . (lambda () (local-set-key (kbd "l") #'pdf-view-next-page)))
      ;;(pdf-view-mode . (lambda () (local-set-key (kbd "m") #'pdf-view-midnight-minor-mode)))
      )

  (add-hook 'pdf-view-mode-hook 'pdf-view-midnight-minor-mode)
#+END_SRC

And after these changes, my emacs pdf-viewer looks like this (its very similar to the look of my current zathura config, but thats kind of the point).
P.S. Of course its the same exact pdf as in my zathura screenshot, you might even think its the same picture :D
[[https://github.com/AuroraDragoon/Dotfiles/blob/master/screenshots/pdf_view.png]]

* Org-mode
Some settings I want for Emacs's Org-mode which I use extensively (like for writing this literate config file). 
It adds:
+ More languages to evaluate with org-babel (by default, only elisp is evaluated).
+ Better headings for org, as I am not a fan of the default asterisks.
+ Set the keybinding for "M-h" to nil in org mode as I use it for something else. This does not need to be done globally as by default "M-h" is only bound in org-mode.
+ When exporting to pdf, org defaults to your system's default pdf viewer (zathura in my case). Since I am in an Emacs buffer editing the file, its more convenient to open the pdf inside Emacs with pdf-tools and the last setting does just that.
+ Org-noter is an excellent program for annotating pdfs using org. Its only problem is that when you open it it creates its frame in a new emacs window which for me is inconvenient, so I change that behaviour to open in the current buffer.
+ Setting my org-todo keywords, which are useful for tracking my current projects

#+BEGIN_SRC elisp

    (org-babel-do-load-languages
       'org-babel-load-languages
       '(
	 (python . t)
	 (haskell . t)
	 (octave . t)
	 (latex . t)
    )
       )


    (require 'org-bullets)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

    (add-hook 'org-mode-hook
	      (lambda () (local-set-key (kbd "M-h") nil)))

    (add-to-list 'org-file-apps '("\\.pdf\\'" . emacs))
    (setq org-noter-always-create-frame nil)

  (setq org-todo-keywords
	'((sequence "TODO"
		    "IMPORTANT"
		    "MAYBE"
		    "ON HOLD"
		    "STARTED"
		    "|"
		    "CANCELLED"
		    "DONE"
		    )))


#+END_SRC
		    
* Dired
Dired is Emacs's built in file manager (stands for directory editor) As dired is my Emacs startup screen as mentioned before, I have some customisations for it which are pretty neat.
I have configured it to include:
+ A dired-mode only keybinding for Alt+Space which allows me to open a file in a seperate buffer but keep the focus on dired. This is mostly useful as a file preview when you want to see something in multiple files for example.
+ Icons alongside each file which represent what type of file it is.
+ Hiding dotfiles by default (Pressing Space and then h, will show all the dotfiles in the directory but I find hiding them better for initial behaviour).
+ A keybinding to create a new file from dired (I cant comprehend why this is not bound to sth by default tbh).

#+BEGIN_SRC elisp
    (require 'dired-x)
    (add-hook 'dired-mode-hook
	      (lambda () (local-set-key (kbd "M-RET") #'dired-display-file)))

    (use-package all-the-icons-dired
      :hook (dired-mode . all-the-icons-dired-mode))


    (use-package dired-hide-dotfile
      :hook (dired-mode . dired-hide-dotfiles-mode))

   (add-hook 'dired-mode-hook
	    (lambda () (local-set-key (kbd "C-+") #'dired-create-empty-file)))


#+END_SRC

This is how Dired ends up looking after these changes
[[https://github.com/AuroraDragoon/Dotfiles/blob/master/screenshots/dired.png]]

* Keybindings
This is all the keybindings I have set for my personal config. Below is a table explaining them. When the keys are seperated with a space, you need to press one after the other while in the rest you press all the keys together. Space is set as my leader key so most of my keybindings start with it. This is heavily influenced by the way spacemacs does it because I used spacemacs before this and I liked the idea. But, since it only has a few keybindings they are simpler.

| Keybinding  | Action                                                                                                                                             |
|-------------+----------------------------------------------------------------------------------------------------------------------------------------------------|
| Space f     | Open a helm menu for finding a specific file                                                                                                       |
| Space Space | Opens the "M-x" menu cause I was a spacemacs user for a few months before starting this config and I got way too used to this keybinding           |
| Space !     | Create a prompt for inputing a single shell command. This is easier than opening a terminal emulator for quick tasks                               |
| Space p     | Opens the package install prompt                                                                                                                   |
| Space r     | List of recently opened packages                                                                                                                   |
| Space o     | Starts the octave client in the working directory of the file from which this was called. I use octave a lot so this is a must for me              |
| Space d     | Asks for a directory and opens dired in that directory                                                                                             |
| Space j     | Opens dired in the current working directory. This is faster than simply calling dired when you want to switch between files in the same directory |
| Space h     | Toggle visibility of dotfiles inside dired. The default behaviour, is for them to be hidden, and this toggles that behaviour                       |
| M-h         | Create a horizontal split inside Emacs                                                                                                             |
| M-v         | Create a vertical split inside Emacs                                                                                                               |
| M-d         | Open my Emacs config (this file). This is very useful for when hacking on Emacs so I can quickly go to my dotfile whenever I want                  |
| M-m         | Open the major-mode commands menu for the buffers current major-mode                                                                               |
| Space t     | Toggles Emacs's default behaviour concerning what to do when it runs out of space in a line. I always want it to go to the next line so this helps |
| Space T     | Executes org-babel-tangle, which is the command used to tangle source code blocks to your config file (the way you make literate config files)     |
| M-C-r       | Simply restarts Emacs. This is useful when hacking in Emacs as for changes to take place you need to restart                                       |
| Space Enter | Opens vterm, my preffered Emacs terminal, for when needed                                                                                          |
| Space b     | Open the menu to switch buffers from all files open inside emacs                                                                                   |
| Space n     | Opens org-noter, my favourite tool for notetaking                                                                                                  |
| M-t         | Opens my todo file. Inside it I store the current projects I have in mind. Useful to have keybinded as I use it a lot                              |
| Space l     | Makes latex fragments inside org render as pictures showing the equation                                                                     |


#+BEGIN_SRC elisp
  (evil-leader/set-leader "<SPC>")
  (evil-leader/set-key
    "f" 'helm-find-files
    "<SPC>" 'helm-M-x
    "!" 'shell-command
    "p" 'package-install
    "r" 'helm-recentf
    "o" 'inferior-octave
    "j" 'dired-jump
    "d" 'dired
    "h" 'dired-hide-dotfiles-mode
    "t" 'toggle-truncate-lines
    "T" 'org-babel-tangle
    "RET" 'vterm
    "b" 'switch-to-buffer
    "n" 'org-noter
    "l" 'org-latex-preview)

  (global-set-key (kbd "M-h") 'split-window-horizontally)
  (global-set-key (kbd "M-v") 'split-window-vertically)

  (global-set-key (kbd "M-C-r") 'restart-emacs)
  (global-set-key (kbd "M-d") (lambda() (interactive)(find-file "~/.emacs.d/README.org")))
  (global-set-key (kbd "M-t") (lambda() (interactive)(find-file "~/todo.org")))

  (global-set-key (kbd "M-m") 'which-key-show-major-mode)

#+END_SRC

* Custom Variables
These are some variables automatically generated by Custom. Its better not to play around with this section of the config file.

#+BEGIN_SRC elisp
;; CUSTOM VARIABLES
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '("0fffa9669425ff140ff2ae8568c7719705ef33b7a927a0ba7c5e2ffcfac09b75" default))
 '(package-selected-packages
   '(evil-collection openwith sequences cl-lib-highlight helm-system-packages async-await popup-complete helm-fuzzy-find evil-space yapfify yaml-mode ws-butler winum which-key web-mode web-beautify vterm volatile-highlights vi-tilde-fringe uuidgen use-package toc-org tagedit spaceline solarized-theme slim-mode scss-mode sass-mode restart-emacs request rainbow-delimiters pyvenv pytest pyenv-mode py-isort pug-mode pspp-mode popwin pip-requirements persp-mode pcre2el paradox org-projectile-helm org-present org-pomodoro org-mime org-download org-bullets open-junk-file neotree move-text mmm-mode markdown-toc magit macrostep lorem-ipsum livid-mode live-py-mode linum-relative link-hint json-mode js2-refactor js-doc intero indent-guide hy-mode hungry-delete htmlize hlint-refactor hl-todo hindent highlight-parentheses highlight-numbers highlight-indentation helm-themes helm-swoop helm-pydoc helm-projectile helm-mode-manager helm-make helm-hoogle helm-flx helm-descbinds helm-css-scss helm-ag haskell-snippets gruvbox-theme google-translate golden-ratio gnuplot gh-md flx-ido fill-column-indicator fancy-battery eyebrowse expand-region exec-path-from-shell evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-surround evil-search-highlight-persist evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-lisp-state evil-indent-plus evil-iedit-state evil-exchange evil-escape evil-ediff evil-args evil-anzu eval-sexp-fu emmet-mode elisp-slime-nav dumb-jump diminish define-word cython-mode csv-mode company-ghci company-ghc column-enforce-mode coffee-mode cmm-mode clean-aindent-mode auto-highlight-symbol auto-compile auctex-latexmk anaconda-mode aggressive-indent adaptive-wrap ace-window ace-link ace-jump-helm-line))
 '(truncate-lines nil))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

#+END_SRC


#+RESULTS:
