#+TITLE: Literate Emacs Config
#+PROPERTY: header-args :tangle init.el 
#+STARTUP: showeverything
#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:0 path:http://thomasf.github.io/solarized-css/org-info.min.js
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-dark.min.css" />

* About this config
This is my GNU Emacs literate config file written in org-mode. Its heavily documentated for that reason.

Emacs has truly become that one tool that has molded SO perfectly to my workflow, that I can no longer live without it. I use it for most of my tasks at this point. This is a vanilla GNU Emacs install with a ton of configurations. I initially used Spacemacs, but the mentality of vanilla fits more with me. Its a blank slate on which I can do anything I want. Spacemacs felt like a different person's vision so I wanted to move to my own Emacs config so I can truly feel its mine. I feel I have succeeded at this in making it truly personal. At this point, I am proud to call it a masterpiece for what I want it. Its definitely not the best config I have seen, nor is it for everyone, but for me, it does everything I want. And its truly incredible at doing all that. I can not imagine a better workflow than this. Thats why although its far from perfect, for what I use it, I can truly consider it a masterpiece in its own right as no other program can get even close to this. 

I have drawn inspiration from a lot of other init.el's but the most apparent one is the spacemacs keybindings. I was a spacemacs user for a few months before deciding to start using this personal config for Emacs. I found its keybindings very ergonomic and although most things arent exactly the way they are done in spacemacs, the inspiration is apparent. For example the Space and , keys are leader keys which I use a lot (space for general commands and , for mode specific, currently only org though).

Note that I know little to no elisp yet (I am in the process of learning though), so some things are probably not done in the most efficient way possible, but everything I have set has its desired behaviour, which is enough for me.

This is how my Emacs currently looks, and because I didnt know what file to screenshot, have my qtile bar's config
[[https://github.com/AuroraDragoon/Dotfiles/blob/master/screenshots/python_environment.png]]

I hope you will find something useful here that you can put to your emacs config as well. Enjoy!!

* Packages
Setting up my packages to work properly. 
The first section has to do with MELPA packages and the second with packages installed manually to my load path.
#+BEGIN_SRC elisp

    (require 'package)
    (add-to-list 'package-archives
		 '("melpa" . "https://melpa.org/packages/") t)

    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

    (let ((default-directory  "~/.emacs.d/libs/"))
      (normal-top-level-add-to-load-path '("."))
      (normal-top-level-add-subdirs-to-load-path))

#+END_SRC

#+RESULTS:

* Sensible Defaults
Change some Emacs defaults to things I consider more sensible.
This includes: 
+ Setting my theme to solarized-dark (my favourite theme).
+ Disabling some features which I dislike personally like the bars that comes by default, and the annoying sounds emacs makes when you type sth wrong.
+ Activating which-key-mode, which is a popup prompt to display how to complete an emacs command.
+ Changing the startup screen to dired because I consider it way more productive than the default.
+ Activating ivy-mode my favourite emacs completion framework. I feel its really counter-productive to not use a completion framework such as Ivy/Helm/Ido. I also activate the all-the-icons integration for ivy. This is primarily for my switch-buffer command. I like icons
+ Changing the M-x menu to counsel M-x. With ivy-mode enabled you get an ivy M-x menu, but it doesn't have the keybinding associated with the action which I deem important. Thats why I set M-x to the counsel menu
+ Moving backup and autosave files to a tmp folder inside my .emacs.d so my directories look like less of a mess.
+ Adding the helpful package which makes documentations better (installing from MELPA didnt work so I needed to do the manual install)

#+BEGIN_SRC elisp

  (load-theme 'solarized-dark t)

  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (tool-bar-mode -1)
  (setq ring-bell-function 'ignore)

  (which-key-mode 1)

  (setq inhibit-startup-screen t)
  (add-hook 'after-init-hook 'dired-jump)

  (ivy-mode 1)
  (all-the-icons-ivy-setup)
  (global-set-key (kbd "M-x") #'counsel-M-x)

  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
  (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)
  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
	auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))

  (require 'dash-functional)
  (require 'helpful)

#+END_SRC

#+RESULTS:
: helpful

* Evil Mode
Enabling Evil Mode, my preffered editing mode for Emacs, with the evil-collection loaded. It helps me with defining evil type keybindings for more programs, which I like. Then I also load evil-org which is a different third party program for evil keys inside org as evil-collection doesn't have that.

#+BEGIN_SRC elisp

  (setq evil-collection-setup-minibuffer t)
  (setq evil-want-keybinding nil)
  (when (require 'evil-collection nil t)
    (evil-collection-init))

  (unless (package-installed-p 'evil)
    (package-install 'evil))

  (require 'evil)
  (evil-mode 1)

  (require 'evil-org)
  (add-hook 'org-mode-hook 'evil-org-mode)
  (evil-org-set-key-theme '(navigation insert textobjects additional calendar))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys)

  #+END_SRC


* Utilities
General utilities that I want enabled when editing, or changes to the way emacs opens some programs.
This enables:
+ When adding a bracket or quote add its pair as well for quicker editing.
+ When the cursor is on one bracket, highlight its matching bracket.
+ Enabling yasnippet snippets.
+ Enabling general, a package that helps me define keybindings easier.
+ Enabling vterm-toggle, a package which helps with not getting a milion vterms open (with a run-or-raise behaviour)
+ Enable all-the-icons mode for the ibuffer which makes it look much nicer (playing around with counsel's switch buffer, which has a sick feature of previewing the buffer you are about to switch to so I have this commented out for now, if I decide to go back to ibuffer though it will be useful).
+ Setting my wolfram alpha ID for use in emacs which allows me to query the website from inside Emacs
+ Activate company-mode everywhere. Trying this experimentally to see if I like what it provides

#+BEGIN_SRC elisp

  (show-paren-mode 1)
  (electric-pair-mode 1)

  (add-to-list 'load-path
	       "~/.emacs.d/plugins/yasnippet")
  (require 'yasnippet)
  (yas-global-mode 1)

  (require 'general)
  (require 'vterm-toggle)

;;  (add-hook 'ibuffer-mode-hook 'all-the-icons-ibuffer-mode)

  (setq truncate-partial-width-windows nil)

  (setq wolfram-alpha-app-id "U9PERG-KTPL49AWA2")

  (add-hook 'after-init-hook 'global-company-mode)

#+END_SRC

* Org-mode
Some settings I want for Emacs's Org-mode which I use extensively (like for writing this literate config file). Its split in sections cause its too huge otherwise. I change way too many stuff in Org :D. 

** Setting up external packages for org
   This first section is about some packages I load for org, which are very helpful for my workflow, such as:
   + Better headings for org, as I am not a fan of the default asterisks.
   + I require org-roam although I havent set it up just yet, to remind me that I eventually want to work with it
   + I load org-download after org, this is a helpful addon which allows me to paste photos on my clipboard to org, which makes adding photos to org documents much faster.
   + I activate calctex and activate it when I go into calc's embedded mode. Its a neat package that allows me to type a formula inside calc and renders it automatically into latex. Latex snippets are what I use mostly (you can find them inside the snippets directory of my .emacs.d but if you want to draw inspiration from somewhere there are much better sources tbh).
   + I activate org-cdlatex-mode which makes typing latex equations easier inside org and massively improves speed of typing equations together with snippets for org and org-zotxt-mode which helps org communicate with Zotero and draw articles/bibliographies for my citations which I have saved in Zotero's database
   + Also add org-tree-slide from presentations inside Org
     
#+BEGIN_SRC elisp

  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

  (use-package org-download
    :after org)

  (require 'calctex)
  (add-hook 'calc-embedded-new-formula-hook 'calctex-mode)

  (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
  (add-hook 'org-mode-hook 'org-zotxt-mode)

  (require 'org-tree-slide)
#+END_SRC

** Org mode utilities
   I change some more things inside org to fix some annoying default behaviours.
   + When exporting to pdf, org defaults to your system's default pdf viewer (zathura in my case). Since I am in an Emacs buffer editing the file, its more convenient to open the pdf inside Emacs with pdf-tools.
   + I write a lot of equations in my documents usually with latex and the normal size of those inside org (available with org-latex-preview) is a bit small for my liking so after playing around with it a bit I scaled it up to 1.3 of the original which I consider a very sensible size
   + Making latex view my bibtex bibliography and export it properly. I took this from the org-ref docs as originally I wasnt getting proper bibliographic entries. I t works with this.
   + Laslty, I tell org that its odt export should be converted to docx as if I am exporting to a rich text editors format, its for a collaboration and most people I know use that format. If its a personal project I always export to a latex pdf because it looks better. 

#+BEGIN_SRC elisp
  (add-to-list 'org-file-apps '("\\.pdf\\'" . emacs))

  (setq org-format-latex-options '(:foreground default :background default :scale 1.3 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers))

  (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))

  (setq org-odt-preferred-output-format "docx")

#+END_SRC

#+RESULTS:
: docx
	    
** Org Noter
   
   Org-noter is an excellent program for annotating pdfs using org. Its main problem is that when you open it it creates its frame in a new emacs window which for me is inconvenient, so I change that behaviour to open the notes the current buffer. I also make another change. Because the typical file that includes a lot of org-noter annotations is crammed with :PROPERTIES: arguments I use a custom function to hide them. They can be useful so I dont hide them by default, but instead make the function interactive (can be called from M-x) and when given the 'all argument on the prompt hides all the :PROPERTIES: arguments. Below is the source code for these changes. Also, since I am not the one who wrote the function have a link to the stack-overflow page where this is answered [[https://stackoverflow.com/questions/17478260/completely-hide-the-properties-drawer-in-org-mode]]

   #+BEGIN_SRC elisp

     (setq org-noter-always-create-frame nil)

     (defun org-cycle-hide-drawers (state)
       "Hide all the :PROPERTIES: drawers when called with the 'all argument. Mainly for hiding them in crammed org-noter files"
       (interactive "M")
       (when (and (derived-mode-p 'org-mode)
		  (not (memq state '(overview folded contents))))
	 (save-excursion
	   (let* ((globalp (memq state '(contents all)))
		  (beg (if globalp
			 (point-min)
			 (point)))
		  (end (if globalp
			 (point-max)
			 (if (eq state 'children)
			   (save-excursion
			     (outline-next-heading)
			     (point))
			   (org-end-of-subtree t)))))
	     (goto-char beg)
	     (while (re-search-forward org-drawer-regexp end t)
	       (save-excursion
		 (beginning-of-line 1)
		 (when (looking-at org-drawer-regexp)
		   (let* ((start (1- (match-beginning 0)))
			  (limit
			    (save-excursion
			      (outline-next-heading)
				(point)))
			  (msg (format
				 (concat
				   "org-cycle-hide-drawers:  "
				   "`:END:`"
				   " line missing at position %s")
				 (1+ start))))
		     (if (re-search-forward "^[ \t]*:END:" limit t)
		       (outline-flag-region start (point-at-eol) t)
		       (user-error msg))))))))))

   #+END_SRC
** Org Roam, Ref and Bibtex
   Org Roam, Org ref and Bibtex are all used in the same context which is why I have them in the same category here (until one gets too large). Bibtex and Org-ref help manage bibliographic references inside org. I use Zotero as my reference manager in which I gather my bibliographies. It exports a .bib file which these two use. Org Roam is a tool which helps you create your own network of notes. Its based on the Zettelkasten method and the Roam Research website. Everything is linked with one another. Org Roam Bibtex (ORB) is a package that combines all of these to help you add citation links from org-ref inside an org-roam buffer. This section includes all the customisations and settings of these packages.

   I set the default directory for org_roam to look and activate it as well as tell Emacs where to find my .bib file exported by Zotero.

   #+BEGIN_SRC elisp

     (setq org-roam-directory "~/org_roam")

     (add-hook 'after-init-hook 'org-roam-mode)

     (setq bibtex-completion-bibliography
	   '("~/org_roam/Zotero_library.bib"))
     (setq reftex-default-bibliography '("~/org_roam/Zotero_library.bib"))

   #+END_SRC
   
** Org-agenda and TODOs
   This is where all the project management magic happens. I set everything I need for TODOs and the org-agenda. Later on in the Keybindings section of the config you can see the keybindings I have set for each action while here are the configurations I want to make. This helps keep this consistent by having those keybindings in that section. I track all my todo files in one directory "~/project_management" so I want every todo defined in that directory to be loaded inside Org-agenda.

   I define a custom function org-make-todo which makes an item todo, gives it a priority and effort value. I like this for initialization of a todo file as it helps with organizing tasks with which one is more urgent and which is harder outside of the already existing file system to manage different kinds of todos.

   I activate org-super-agenda which gives me very easy to use queries for anything you can think of. I use it in conjuction with org-agenda-custom-commands which allows me to define new agenda shortcuts within which I define my new custom queries, which fit my personal workflow. Also, because some of my todos are rather large I disable truncate lines inside the agenda buffer. This is supposed to be the default behaviour but for some reason agenda is disobedient.
   
#+BEGIN_SRC elisp

  (setq org-todo-keywords
	  '((sequence "TODO(t)"
		      "ACTIVE(a)"
		      "NEXT(n)"
		      "WAIT(w)"
		      "|"
		      "DONE(d@)"
		      "CANCELLED(c@)"
		      )))

    (setq org-agenda-files
	    '("~/project_management"))

  (defun org-make-todo ()
    (interactive)
    (org-todo)
    (org-priority)
    (org-set-effort)
    (org-set-tags-command))

  (org-super-agenda-mode 1)

  (add-hook 'org-agenda-mode-hook 'toggle-truncate-lines)

  (setq org-agenda-custom-commands
	'(("q" "Quick Check for the day"
	   ((agenda "" ((org-agenda-span 'day)
			(org-super-agenda-groups
			 '((:name "Today"
				  :time-grid t
				  :date today
				  :scheduled today)))))
	   (alltodo "" ((org-agenda-overriding-header "")
			 (org-super-agenda-groups
			  '((:name "What I've been doing"
				   :todo "ACTIVE")
			    (:name "Plans for the foreseeable future"
				   :todo "NEXT")
			    (:name "You GOTTA check this one out"
				   :priority "A")
			    (:name "As easy as they get"
				   :effort< "0:10")
			    (:discard (:anything))))))))
	  ("u" "University Projects"
	   ((alltodo "" ((org-agenda-overriding-header "")
			 (org-super-agenda-groups
			  '((:name "Currently Working on"
				   :and (:tag "University" :todo "ACTIVE"))
			    (:name "This one's next (probably)"
				   :and (:priority "A" :tag "University"))
			    (:name "Medium Priority Projects"
				   :and (:tag "University" :priority "B"))
			    (:name "Trivial Projects, I'ma do them at some point though :D"
				   :and (:tag "University" :priority "C"))
			    (:discard (:not (:tag "University")))))))))
	  ("e" "Emacs Projects"
	   ((alltodo "" ((org-agenda-overriding-header "")
			 (org-super-agenda-groups
			  '((:name "Configuring Emacs, the Present"
				   :and (:tag "Emacs" :todo "ACTIVE")
				   :and (:tag "Emacs" :todo "NEXT"))
			    (:name "What to add, What to add??"
				   :and (:tag "Emacs" :priority "A"))
			    (:name "Wow, this one's easy, lets do it"
				   :and (:tag "Emacs" :effort< "0:15"))
			    (:discard (:not (:tag "Emacs")))
			    (:name "But wait, this was only the beginning. The real fun starts here!"
				   :anything)))))))))


#+END_SRC

#+RESULTS:
| s | Super Powered Agenda | ((agenda  ((org-agenda-span 'day) (org-super-agenda-groups '((:name Today :time-grid t :date today :scheduled today))))) (alltodo  ((org-agenda-overriding-header ) (org-super-agenda-groups '((:name What I've been doing :todo ACTIVE) (:name Plans for the foreseeable future :todo NEXT) (:name You GOTTA check this one out :priority A) (:name As easy as they get :effort< 0:10) (:discard (:anything)))))))                        |
| u | University Projects  | ((alltodo  ((org-agenda-overriding-header ) (org-super-agenda-groups '((:name Currently Working on :and (:tag University :todo ACTIVE)) (:name What you gonna start next (probably) :and (:priority A :tag University)) (:name Medium Priority Projects :and (:tag University :priority B)) (:name Trivial Projects, I'ma do them at some point :D :and (:tag University :priority C)) (:discard (:not (:tag University))))))))            |
| e | Emacs Projects       | ((alltodo  ((org-agenda-overriding-header ) (org-super-agenda-groups '((:name Configuring Emacs, the Present :and (:tag Emacs :todo ACTIVE) :and (:tag Emacs :todo NEXT)) (:name What to add, What to add?? :and (:tag Emacs :priority A)) (:name Wow, this one's easy, lets do it :and (:tag Emacs :effort< 0:15)) (:discard (:not (:tag Emacs))) (:name But wait, this was only the beginning. The real fun starts here! :anything)))))) |

** Org Babel
More languages to evaluate with org-babel (by default, only elisp is evaluated). I dont use this extensively but for those times that I need to evaluate code in org, its probably going to be in one of these so might as well add them.

#+BEGIN_SRC elisp

  (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (python . t)
       (haskell . t)
       (octave . t)
       (latex . t)
  )
     )

#+END_SRC

* Dired
  Dired is Emacs's built in file manager (stands for directory editor) As dired is my Emacs startup screen as mentioned before, I have some customisations for it which are pretty neat.
  I have configured it to include:
  + Icons alongside each file which represent what type of file it is.
  + Hiding dotfiles by default (Pressing Space and then h, will show all the dotfiles in the directory but I find hiding them better for initial behaviour).
  + A keybinding to create a new file from dired (I cant comprehend why this is not bound to sth by default tbh). Bound to C-+.
  + For consistency the keybindings are in the Keybindings section of this config even if they are only for dired

  #+BEGIN_SRC elisp
    (require 'dired-x)
    (use-package all-the-icons-dired
      :hook (dired-mode . all-the-icons-dired-mode))


    (use-package dired-hide-dotfile
      :hook (dired-mode . dired-hide-dotfiles-mode))

  #+END_SRC

  This is how Dired ends up looking after these changes
  [[https://github.com/AuroraDragoon/Dotfiles/blob/master/screenshots/dired.png]]

* Other Major Modes
Some other extensions inside my Emacs config that require some changes for their major modes to function as I want them. This currently includes:
- Ebuku
- PDF Tools
- Octave
- Emacs Application Framework
  
** Ebuku
  Ebuku is the Emacs major mode for buku, a simple terminal bookmark manager. Since I store all my bookmarks there, this gives me a way to launch my favourite pages from inside Emacs, which is a utility I deem very useful. For some reason, evil-collections keybindings didn't work by default so I enabled them manually (this is the first package I have had this happen to me with)

  #+BEGIN_SRC elisp
    (require 'ebuku)
    (require 'evil-collection-ebuku)

    (add-hook 'ebuku-mode-hook 'evil-collection-ebuku-setup)
  #+END_SRC
  
** PDF Tools

Configuration for PDF-tools, my favourite built-in Emacs pdf viewer. I set it as the default pdf viewer for Emacs and enable the midnight minor mode for it as it makes it match my favourite theme solarized-dark, which I love.

#+BEGIN_SRC elisp

    (use-package pdf-tools
      :mode (("\\.pdf\\'" . pdf-view-mode))
      :config
      ;(define-key pdf-view-mode-map [remap quit-window] #'kill-current-buffer)
      (progn
	(pdf-tools-install))
      )

  (add-hook 'pdf-view-mode-hook 'pdf-view-midnight-minor-mode)

#+END_SRC

And after these changes, my emacs pdf-viewer looks like this (its very similar to the look of my current zathura config, but thats kind of the point).
P.S. Of course its the same exact pdf as in my zathura screenshot, you might even think its the same picture :D
[[https://github.com/AuroraDragoon/Dotfiles/blob/master/screenshots/pdf_view.png]]

** Octave
   Octave is a very powerful piece of software for mathematical computations. You can edit octave scripts inside of Emacs and also run an instance of Octave to execute them. But I ran into some problems with it. Some files with the .m extension weren't being opened in the Octave major mode, so I fix that.
   Furthermore, it was inconvenient for Octave to open in my current working directory so when I launch it I want to automatically cd to the directory holding all my Octave scripts. For this one I needed to create an "init_octave.m" file inside my .emacs.d which octave always reads when starting inside Emacs. Inside it you just cd to "home/your_user_name/Documents/Octave". For some reason it didnt recognize ~ as my home directory so I needed to add the full path. You can find the file inside this repo.

   #+BEGIN_SRC elisp
      (add-to-list 'auto-mode-alist '("\\.m\\'" . octave-mode))
   #+END_SRC
   
** Emacs Application Framework
  
     EAF is a very promising package for Emacs giving it some useful gui apps that are not so easy to find in other packages (such as a browser) and in general a full suite of applications. Unfortunately its got a weird behaviour in tiling window managers such as i3 and qtile, which I use not allowing me to use Emacs commands inside its buffers. It seems that when the cursor is outside the Emacs buffer (in my bar) this fixes but its still annoying so its use is limited unfortunately.

   #+BEGIN_SRC elisp
     (require 'eaf)

     (require 'eaf-evil)
     ;(setq eaf-evil-leader-key "SPC")

     (setq eaf-wm-focus-fix-wms '("qtile"))
   #+END_SRC
  
* Keybindings
This is all the keybindings I have set for my personal config. Below is a table explaining them. When the keys are seperated with a space, you need to press one after the other while when seperated with a "-" you press all the keys together. Space is set as my global leader key so most of my keybindings start with it. This is heavily influenced by the way spacemacs does it because I used spacemacs before this and I liked the idea. But, since it has way less keybindings than spacemacs they are simpler. I manage most of these using leader keys from the general.el package. I also have "," for org-mode specific commands (which can only be ran from an org mode buffer) as they are too many to have in the same leader key. I can also nest leader keys inside other leader keys, like how z is the leader key for zotxt (Zotero integration) inside the org keybindings.

** Global keybindings, defined with the space leader key
| Keybinding  | Action                                                                                                                                              |
|-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------|
| Space !     | Create a prompt for inputing a single shell command. This is easier than opening a terminal emulator for quick tasks                                |
| Space p     | Opens the package install prompt                                                                                                                    |
| Space o     | Starts the octave client in the working directory of the file from which this was called. I use octave a lot so this is a must for me               |
| Space d     | Asks for a directory and opens dired in that directory                                                                                              |
| Space j     | Opens dired in the current working directory. This is faster than simply calling dired when you want to switch between files in the same directory  |
| Space h     | Toggle visibility of dotfiles inside dired. In the dired section I set them to be hidden by default, and this toggles that behaviour                |
| Space H     | Create a horizontal split inside Emacs                                                                                                              |
| Space V     | Create a vertical split inside Emacs                                                                                                                |
| Space Enter | Opens vterm, my preffered Emacs terminal, for when needed                                                                                           |
| Space t     | Toggles Emacs's default behaviour concerning what to do when it runs out of space in a line. I always want it to go to the next line so this helps  |
| Space T     | Executes org-babel-tangle, which is the command used to tangle source code blocks to your config file (the way you make literate config files)      |
| Space b     | Open the counsel-switch-buffer menu which allows switching buffers with relative ease (also has a preview of the buffer which is a neat feature)    |
| Space f     | Find a file inside a directory. I usually prefer just using dired but this can prove useful in folders with a lot of "chaos"                        |
| Space g     | Go to a specific page inside a pdf                                                                                                                  |
| Space a     | Opens org-agenda. Technically an org command, but I want to be able to use it globally and not only in Emacs                                        |
| Space c     | Activates the calc menu (originally C-x *). The two options I use from here are "c" for the classic calc major mode and "e" for embedded mode       |
| Space w     | Query WolframAlpha from inside Emacs. Wolfram Alpha is a website which helps with advanced mathematical calculations. Its very helpful to have      |
| Space m     | Open magit, the emacs git client                                                                                                                    |
| Space r f   | Find file inside the org-roam dir. If it doesn't exist create it. Since this method follows a non hierarchical sorting system its better than dired |
| Space R     | If Emacs crashes for some reason, this command restores the backup it kept (almost always results to no data-loss)                                  |
| Space B     | Open the Ivy Bibtex menu to open an article saved to my Zotero database                                                                             |

#+BEGIN_SRC elisp

  (general-create-definer my-leader-def
			  :prefix "SPC")

  (my-leader-def
   :states 'normal
   :keymaps 'override
    "!" 'shell-command
    "p" 'package-install
    "o" 'inferior-octave
    "d" 'dired
    "h" 'dired-hide-dotfiles-mode
    "t" 'toggle-truncate-lines
    "j" 'dired-jump
    "T" 'org-babel-tangle
    "RET" 'vterm-toggle
    "<C-return>" 'vterm 
    "b" 'counsel-switch-buffer
    "a" 'org-agenda
    "g" 'pdf-view-goto-page
    "H" 'split-window-horizontally
    "V" 'split-window-vertically
    "c" 'calc-dispatch
    "w" 'wolfram-alpha
    "R" 'recover-this-file
    "f" 'counsel-find-file
    "m" 'magit
    "r f" 'org-roam-find-file
    "B" 'ivy-bibtex)

#+END_SRC

** Org mode keybindings
| Keybinding | Action                                                                                                                                            |
|------------+---------------------------------------------------------------------------------------------------------------------------------------------------|
| , l        | Makes latex fragments inside org, render as pictures showing the equation. Helps ensure I havent typed something wrong without the need to export |
| , s        | Schedules a todo task to a specific date and time                                                                                                 |
| , n        | Opens org-noter, my favourite tool for notetaking from pdfs                                                                                       |
| , t        | Changes the todo state of an item                                                                                                                 |
| , p        | Changes a tasks priority                                                                                                                          |
| , e        | Org export command cause C-c C-e is really annoying when you export like 20 times for the same pdf.                                               |
| , T        | Changes a tasks tags                                                                                                                              |
| , v        | Search for all tasks with a specific tag                                                                                                          |
| , m        | Activates my custom make-todo function which sets todo state, effort, tags and priority for a task. I prefer it for todo initialization           |
| , y        | Pastes a photograph from my clipboard, very helptful to speed up adding photos to my documents                                                    |
| , z i      | Insert zotero reference link. With C-u it chooses the highlighted reference link inside Zotero (it needs to be open and have zotxt installed)     |
| , z o      | Open a zotero link if the cursor is on one                                                                                                        |
| , z n      | Open org-noter for a zotero article, very helpful for live annotations, which none can do as well as Emacs. Still experimental though             |
| , r i      | Insert a backlink to connect to notes together in org-roam                                                                                        |
| , r r      | Open the org-roam sidebar which shows all references to the current active file                                                                   |
| , c        | Open an ivy menu to choose a citation to add to an article                                                                                     |

#+BEGIN_SRC elisp
  (general-create-definer org-leader-def
	:prefix ",")

      (org-leader-def
       :states 'normal
       :keymaps 'org-mode-map
       "l" 'org-latex-preview
       "n" 'org-noter
       "s" 'org-schedule
       "t" 'org-todo
       "m" 'org-make-todo
       "e" 'org-export-dispatch
       "p" 'org-priority
       "v" 'org-tags-view
       "T" 'org-set-tags-command
       "y" 'org-download-clipboard
       "z i" 'org-zotxt-insert-reference-link
       "z o" 'org-zotxt-open-attachment
       "z n" 'org-zotxt-noter
       "r i" 'org-roam-insert
       "r r" 'org-roam
       "c" 'org-ref-ivy-insert-cite-link
       "h" 'org-cycle-hide-drawers)

#+END_SRC

#+RESULTS:

** Other keybindings, either mode specific or general, that function without the space key
| Keybinding | Action                                                                                                                                             |
|------------+----------------------------------------------------------------------------------------------------------------------------------------------------|
| M-d        | Open my Emacs config. This is very useful for when hacking on Emacs so I can quickly go to my dotfile whenever I want without typing the full path |
| M-C-r      | Simply restarts Emacs. Always good to have a restart function                                                                                      |
| C-+        | In Dired mode. Creates a new empty file inside the current working directory                                                                       |
| M-t        | Open my Emacs todo file. I use it to track the things I want to work on next inside Emacs so its definitely worth having a shortcut to             |
| M-b        | Open Ebuku, the buku bookmark manager's Emacs major mode from where I can open my bookmarks from inside Emacs                                      |
| C-h keys   | I change the primary C-h keybindings to their helpful alternatives. They have more info than the defaults (which are already great) so its a plus  |
| C-c C-d    | Lookup the current symbol at point. Not exactly sure of its use but its recommended in the helpful github repo so I added it                       |
|------------+----------------------------------------------------------------------------------------------------------------------------------------------------|
| PDF VIEW   | PDF View keybindings                                                                                                                               |
| c          | In pdf-view mode. Kill the buffer. This is useful for org-pdf-exports  cause when I reopen it, it refreshes automatically, which I like            |
| i          | If pdf-view is in an org-noter buffer, this allows for a note to be added in the matching org buffer                                               |
| a t        | Add a text annotation to a pdf directly                                                                                                            |
| a m        | Add a markup annotation to a pdf directly                                                                                                          |

#+BEGIN_SRC elisp
      (general-define-key
   :states 'normal
   :keymaps 'pdf-view-mode-map
   "i" 'org-noter-insert-note
   "c" 'kill-current-buffer
   "a t" 'pdf-annot-add-text-annotation
   "a m" 'pdf-annot-add-markup-annotation)

    (global-set-key (kbd "M-b") 'ebuku)
    (global-set-key (kbd "M-C-r") 'restart-emacs)
    (global-set-key (kbd "M-d") (lambda() (interactive)(find-file "~/.emacs.d/README.org")))
    (global-set-key (kbd "M-t") (lambda() (interactive)(find-file "~/project_management/emacs.org")))

  (add-hook 'dired-mode-hook
	    (lambda () (local-set-key (kbd "C-+") #'dired-create-empty-file)))

  (global-set-key (kbd "C-h f") #'helpful-callable)
  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)
  (global-set-key (kbd "C-c C-d") #'helpful-at-point)
  (global-set-key (kbd "C-h F") #'helpful-function)
  (global-set-key (kbd "C-h C") #'helpful-command)

#+END_SRC

* Custom Variables
These are some variables automatically generated by Custom. Its better not to play around with this section of the config file as to not mess something up accidentally.

#+BEGIN_SRC elisp
;; CUSTOM VARIABLES
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '("0fffa9669425ff140ff2ae8568c7719705ef33b7a927a0ba7c5e2ffcfac09b75" default))
 '(package-selected-packages
   '(evil-collection openwith sequences cl-lib-highlight helm-system-packages async-await popup-complete helm-fuzzy-find evil-space yapfify yaml-mode ws-butler winum which-key web-mode web-beautify vterm volatile-highlights vi-tilde-fringe uuidgen use-package toc-org tagedit spaceline solarized-theme slim-mode scss-mode sass-mode restart-emacs request rainbow-delimiters pyvenv pytest pyenv-mode py-isort pug-mode pspp-mode popwin pip-requirements persp-mode pcre2el paradox org-projectile-helm org-present org-pomodoro org-mime org-download org-bullets open-junk-file neotree move-text mmm-mode markdown-toc magit macrostep lorem-ipsum livid-mode live-py-mode linum-relative link-hint json-mode js2-refactor js-doc intero indent-guide hy-mode hungry-delete htmlize hlint-refactor hl-todo hindent highlight-parentheses highlight-numbers highlight-indentation helm-themes helm-swoop helm-pydoc helm-projectile helm-mode-manager helm-make helm-hoogle helm-flx helm-descbinds helm-css-scss helm-ag haskell-snippets gruvbox-theme google-translate golden-ratio gnuplot gh-md flx-ido fill-column-indicator fancy-battery eyebrowse expand-region exec-path-from-shell evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-surround evil-search-highlight-persist evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-lisp-state evil-indent-plus evil-iedit-state evil-exchange evil-escape evil-ediff evil-args evil-anzu eval-sexp-fu emmet-mode elisp-slime-nav dumb-jump diminish define-word cython-mode csv-mode company-ghci company-ghc column-enforce-mode coffee-mode cmm-mode clean-aindent-mode auto-highlight-symbol auto-compile auctex-latexmk anaconda-mode aggressive-indent adaptive-wrap ace-window ace-link ace-jump-helm-line)))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

#+END_SRC


#+RESULTS:
Wrong type argument: integer-or-marker-p, nil
t
quit-window kill

