#+TITLE: Literate Emacs Config
#+PROPERTY: header-args :tangle init.el 
#+STARTUP: showeverything
#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:0 path:http://thomasf.github.io/solarized-css/org-info.min.js
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-dark.min.css" />

* COMMENT Project Management in Emacs
   I want to start learning more things about managing my projects in Emacs. There are some built-in project features in Emacs and the projectile package helps a lot with project management. This isn't currently urgent but its usability is sure to arise soon. Being able to export a latex file which draws info from multiple other files inside the projects directory is awesome. Looking into the future, this is probably going to be the most efficient way to get to writing my diploma thesis and any other big project I want to manage.
   
   Obviously there are a lot of things to do here, but here is a non exhaustive list of things to play around with in the spirit of project management. The order isnt strict but its the order in which I predict I will do these
   - [ ] Research the generals of project manangement and set important variables with the built-in features of project management in Emacs
   - [ ] Do the same, but for projectile, which helps an already set up project infrastructure a lot
   - [ ] Create a "playground" test project for trying out things
   - [ ] Think of a use-case for project management which is going to be in the near future and make it happen
   - [ ] Go deep in project management and start using the more advanced features Emacs provides
   
* COMMENT Long term ideas for things I can try [0/7]
These are interesting packages to check in the long term. But nothing to hurry with, as I dont need any of them urgently.
 - [ ] ERC is an IRC client for Emacs. Elfeed is an RSS reader for emacs. EMMS is a music player for Emacs. I could get around to configuring them in case I start using them
 - [ ] There are a lot of eshell configuration options which I can try if I ever get around to using eshell.
 - [ ] There is a mastodon package for Emacs (I am assuming to run mastodon from inside Emacs). If I try out mastodon, I cant see why I shouldn't use this.
 - [ ] https://github.com/daedreth/UncleDavesEmacs/blob/master/config.org An emacs DE config. The things that interest me the most here are specific to an emacs DE, the rest are pretty similar to defaults. If I switch to EXWM (which I will definitely try at some point) this might be helpful
 - [ ] SPEAKING OF EXWM, I MUST TRY IT. But although its Emacs and I will be comfortable in it from the get go, its definitely going to be time consuming so I am stalling it for now cause I dont want to spend all my time there. 
 - [ ] Flyspell dictionary check. Togglable english and greek dictionaries
 - [ ] Become an elisp guru and manage to write a correct function that finds the company-backend used and if its the latex one, makes the idle time significantly smaller, but then fixes it, if its anything else. I tried it but struggled to get a correct condition for my if statement. Its something to look into for the future though. 
  
:CONTENTS:

:END:

* About this config

Emacs has truly become that one tool that has molded exceptionally to my workflow, that I can no longer live without it. I use it for most of my tasks at this point. This is a vanilla GNU Emacs install with a ton of configurations. I initially used Spacemacs, but the mentality of vanilla fits more with me. Its a blank slate on which I can do anything I want. Spacemacs felt like a different person's vision so I wanted to move to my own Emacs config so I can truly feel its mine. I feel I have succeeded at this in making it truly personal. Its definitely not the best config I have seen, nor is it for everyone, but for me, it does everything I want. And its truly incredible at doing all that. I can not imagine a better workflow than this. Thats why although its far from perfect, for what I use it, I can truly consider it a masterpiece in its own right as no other program can get even close to this. 

I have drawn inspiration from a lot of other init.el's but the most apparent one is the spacemacs keybindings. I was a spacemacs user for a few months before deciding to start using this personal config for Emacs. I found its keybindings very ergonomic and although most things arent exactly the way they are done in spacemacs, the inspiration is apparent. For example the Space and , keys are leader keys which I use a lot (space for general commands and , for mode specific, currently only org though).

Note that I know little to no elisp yet (I am in the process of learning though), so some things are probably not done in the most efficient way possible, but everything I have set has its desired behaviour, which is enough for me.

I hope you will find something useful here that you can put to your emacs config as well. Below, is the Table of Contents for my config as it has grown to be quite lengthy. Enjoy!!

:CONTENTS:
- [[#about-this-config][About this config]]
- [[#packages][Packages]]
- [[#sensible-defaults][Sensible Defaults]]
- [[#evil-mode][Evil Mode]]
- [[#utilities][Utilities]]
- [[#keybindings][Keybindings]]
  - [[#global-keybindings-defined-with-the-space-leader-key][Global keybindings, defined with the space leader key]]
  - [[#org-mode-keybindings][Org mode keybindings]]
  - [[#other-keybindings-either-mode-specific-or-general-that-function-without-the-space-key][Other keybindings, either mode specific or general, that function without the space key]]
- [[#dired][Dired]]
- [[#useful-minor-modes][Useful Minor Modes]]
- [[#org-mode][Org-mode]]
  - [[#setting-up-external-packages-for-org][Setting up external packages for org]]
  - [[#org-mode-utilities][Org mode utilities]]
  - [[#org-noter][Org Noter]]
  - [[#org-babel][Org Babel]]
  - [[#org-agenda-and-todos][Org-agenda and TODOs]]
- [[#org-roam-references-and-the-zettelkasten-workflow][Org Roam, References and the Zettelkasten Workflow]]
  - [[#initialisation-variables][Initialisation Variables]]
  - [[#templates][Templates]]
- [[#inkscape-x-emacs][Inkscape x Emacs]]
- [[#other-major-modes][Other Major Modes]]
  - [[#ebuku][Ebuku]]
  - [[#pdf-tools][PDF Tools]]
  - [[#octave][Octave]]
  - [[#emacs-application-framework][Emacs Application Framework]]
- [[#custom-variables][Custom Variables]]
:END:

* Packages
  :PROPERTIES:
  :TOC:      :include all
  :END:
Setting up my packages to work properly. 
The first section has to do with packages installed from melpa, the second with packages installed manually to my load path and the third about auto-updates to my packages which will be issued once a week.

#+BEGIN_SRC elisp

  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (let ((default-directory  "~/.emacs.d/libs/"))
    (normal-top-level-add-to-load-path '("."))
    (normal-top-level-add-subdirs-to-load-path))

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    (auto-package-update-delete-old-versions t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+END_SRC

#+RESULTS:

* Sensible Defaults
Change some Emacs defaults to things I consider more sensible for my use cases.
This includes: 
+ Activating gcmh mode, which helps improve my startup time (Note that to truly get a benefit from this it needs to be very early on in the config). 
+ Setting my theme to doom's variant of solarized-dark. I like it more than the default solarized-dark in melpa (you can get it from the doom-themes package).
+ Disabling some features which I dislike personally like the bars that comes by default, and the annoying sounds emacs makes when you type sth wrong.
+ Activating which-key-mode, which is a popup prompt to display how to complete an emacs command.
+ Changing the startup screen to dired because I consider it way more productive than the default.
+ Activating ivy-mode my favourite emacs completion framework. I feel its really counter-productive to not use a completion framework such as Ivy/Helm/Ido. I also activate the all-the-icons integration for ivy. This is primarily for my switch-buffer command. I like icons
+ Changing the M-x menu to counsel M-x. With ivy-mode enabled you get an ivy M-x menu, but it doesn't have the keybinding associated with the action which I deem important. Thats why I set M-x to the counsel menu
+ Moving backup and autosave files to a tmp folder inside my .emacs.d so my directories look like less of a mess.
+ Adding the helpful package which makes documentations better (installing from MELPA didnt work so I needed to do the manual install)
+ Changed my modeline to the doom-modeline. It looks better than the default modeline in Emacs imo
+ Changing yes-no prompts to y-n, because its simply easier to type than yes-no.
+ Hide elements such as asterisks when writing a bold word by default. In the [[*Utilities][Utilities]] section of the config, I also define a function which toggles this behaviour

#+BEGIN_SRC elisp

  (gcmh-mode 1)

  (load-theme 'doom-solarized-dark t)

  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (tool-bar-mode -1)
  (setq ring-bell-function 'ignore)

  (which-key-mode 1)

  (setq inhibit-startup-screen t)
  (add-hook 'after-init-hook 'dired-jump)

  (ivy-mode 1)
  (all-the-icons-ivy-setup)
  (global-set-key (kbd "M-x") #'counsel-M-x)

  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
  (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)
  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
	auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))

  (require 'dash-functional)
  (require 'helpful)

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config (setq doom-modeline-minor-modes nil
		  doom-modeline-enable-word-count t))

  (defalias 'yes-or-no-p 'y-or-n-p)

  (setq org-hide-emphasis-markers t)

#+END_SRC

#+RESULTS:
: t

* Evil Mode
Enabling Evil Mode, my preffered editing mode for Emacs, with the evil-collection loaded. It helps me with defining evil type keybindings for more programs, which I like. Then I also load evil-org which is a package for evil keys inside org as evil-collection doesn't have that. 

#+BEGIN_SRC elisp

  (setq evil-collection-setup-minibuffer t)
  (setq evil-want-keybinding nil)
  (when (require 'evil-collection nil t)
    (evil-collection-init))

  (unless (package-installed-p 'evil)
    (package-install 'evil))

  (require 'evil)
  (evil-mode 1)

  (require 'evil-org)
  (add-hook 'org-mode-hook 'evil-org-mode)
  (evil-org-set-key-theme '(navigation insert textobjects additional calendar))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys)

  #+END_SRC

* Utilities
General utilities that I want enabled when editing, or changes to the way emacs opens some programs.
This enables:
+ Enabling yasnippet snippets.
+ Enabling general, a package that helps me define keybindings easier.
+ Enabling vterm-toggle, a package which helps with not getting a milion vterms open (with a run-or-raise behaviour)
+ Remove the warnings Emacs gives when opening large files or following vc controlled symlinks. I dont need them and they can be annoying.
+ Changing the heading and title font to match my global font and resizing them so 1st tier headings and titles actually stand out like they should.
+ A function to toggle the behaviour of markup elements such as visible asterisks when writing a message in bold. I dont like seeing them usually, but its good to have a function which toggle this behaviour

#+BEGIN_SRC elisp

  (add-to-list 'load-path
	       "~/.emacs.d/plugins/yasnippet")
  (require 'yasnippet)
  (yas-global-mode 1)

  (require 'general)
  (require 'vterm-toggle)

  (setq large-file-warning-threshold nil)
  (setq vc-follow-symlinks t)

  (set-face-attribute 'org-document-title nil :font "Source Code Pro" :weight 'bold :height 1.3)
      (dolist (face '((org-level-1 . 1.2)
		      (org-level-2 . 1.1)
		      (org-level-3 . 1.05)
		      (org-level-4 . 1.0)
		      (org-level-5 . 1.1)
		      (org-level-6 . 1.1)
		      (org-level-7 . 1.1)
		      (org-level-8 . 1.1)))
	(set-face-attribute (car face) nil :font "Source Code Pro" :weight 'regular :height (cdr face)))

  (defun org-toggle-emphasis ()
    "Toggle hiding/showing of org emphasize markers."
    (interactive)
    (if org-hide-emphasis-markers
	(set-variable 'org-hide-emphasis-markers nil)
      (set-variable 'org-hide-emphasis-markers t)))

  (setq counsel-spotify-client-id "0df2796a793b41dc91711eb9f85c0e77")
  (setq counsel-spotify-client-secret "bcdbb823795640248ff2c29eedadb800")

#+END_SRC

#+RESULTS:
| apply | tab-jump-out | 1 |

* Keybindings
  This is my absolute favourite section of this entire config. But its a very big part of my config and I considered it more prudent to include it as its own file. You can find keybindings.org in this directory, which is the literate configuration of my keybindings and inside the libs folder (which contains all the external elisp "libraries" I have installed manually) you can find the keybindings.el file which I require in this section of the config to load. It acts as if it was an external package for Emacs which helps make this config more tidy. 

  #+BEGIN_SRC elisp

    (require 'keybindings)

  #+END_SRC
  
* Dired
  Dired is Emacs's built in file manager (stands for directory editor) As dired is my Emacs startup screen as mentioned before, I have some customisations for it which are pretty neat.
  I have configured it to include:
  + Icons alongside each file which represent what type of file it is.
  + Hiding dotfiles by default (Pressing SPC and then h, will show all the dotfiles in the directory but I find hiding them better for initial behaviour).
  + Added the functionality of when a folder has a single item, directly go to that item (open if its file, display the directory if its a directory). This is how you vieew folders in github, which behaviour I really like it so since I found a package with this behaviour (dired-collapse) I added it to my config and hooked it to dired mode. 

  #+BEGIN_SRC elisp
    (require 'dired-x)

    (use-package all-the-icons-dired
      :hook (dired-mode . all-the-icons-dired-mode))

    (use-package dired-hide-dotfile
      :hook (dired-mode . dired-hide-dotfiles-mode))

    (use-package dired-collapse
      :hook (dired-mode . dired-collapse-mode))

    (setq all-the-icons-dired-monochrome nil)
  #+END_SRC

  This is how Dired ends up looking after these changes
  [[https://github.com/AuroraDragoon/Dotfiles/blob/master/screenshots/dired.png]]

* Useful Minor Modes
  I enable a lot of minor modes on startup and I also set some up for use. This section documents these modes. Which-key and Ivy are omitted from this section as they fit more in the [[*Sensible Defaults][Sensible Defaults]] section.
+ When adding a bracket or quote add its pair as well for quicker editing.
+ When the cursor is on one bracket, highlight its matching bracket.
+ Setting my wolfram alpha ID for use in emacs which allows me to query the website from inside Emacs
+ Activating undo-tree-mode everywhere.
+ Activate company-mode everywhere. Helpful autocompletions, I dont see why not.
+ Change some Company-specific variables when company is activated. This activates autocompletion for latex symbols and allows to use them in org-mode. It also makes the autocompletion start from the second character typed (mostly important for latex autocompletions to start after the first character following the \)
+ Hooking magit-todos to magit-mode. This allows me to see todos in a git repo inside the git status.
+ Calfw is a calendar app for Emacs. Calfw-git allows you to see your git commit history inside of calfw while calfw-org shows org-todos in a calendar interface.
+ Audio files, obscure image files and MS/Libre Office documents don't open properly inside Emacs. I set up openwith to open them with external files.
  
  #+BEGIN_SRC elisp

    (show-paren-mode 1)
    (electric-pair-mode 1)
    (setq wolfram-alpha-app-id "U9PERG-KTPL49AWA2")
    (global-undo-tree-mode 1)

    (use-package magit-todos-mode
      :hook magit-mode)
    (require 'calfw-git)
    (require 'calfw-org)

    (use-package openwith
      :config
      (setq openwith-associations
	    (list
	     (list (openwith-make-extension-regexp
		    '("mpg" "mpeg" "mp3" "mp4"
		      "avi" "wmv" "wav" "mov" "flv"
		      "ogm" "ogg" "mkv"))
		    "mpv"
		    '(file))
    (list (openwith-make-extension-regexp
		    '("xbm" "pbm" "pgm" "ppm" "pnm"
		      "gif" "bmp" "tif"))
		      "sxiv"
		      '(file))
	     (list (openwith-make-extension-regexp
		    '("docx" "doc" "xlsx" "xls" "ppt" "odt" "ods"))
		   "libreoffice"
		   '(file))))
	    (openwith-mode 1))

    (use-package projectile
      :ensure t
      :init
      (projectile-mode +1)
      :bind (:map projectile-mode-map
		  ("M-p" . projectile-command-map)))

  #+END_SRC

  #+RESULTS:
  : t
  
* Org-mode
Some settings I want for Emacs's Org-mode which I use extensively (like for writing this literate config file). Its split in sections cause its too huge otherwise. I change way too many stuff in Org :D. 

** Setting up external packages for org
   This first section is about some packages I load for org, which are very helpful for my workflow, such as:
   + Better headings for org, as I am not a fan of the default asterisks.
   + I load org-download after org, this is a helpful addon which allows me to paste photos on my clipboard to org, which makes adding photos to org documents much faster.
   + I activate calctex and activate it when I go into calc's embedded mode. Its a neat package that allows me to type a formula inside calc and renders it automatically into latex. Latex snippets are what I use mostly (you can find them inside the snippets directory of my .emacs.d but if you want to draw inspiration from somewhere there are much better sources tbh).
   + I activate org-cdlatex-mode which makes typing latex equations easier inside org and massively improves speed of typing equations together with snippets for org
   + Also add org-tree-slide from presentations inside Org
     
#+BEGIN_SRC elisp

    (add-hook 'org-mode-hook #'(lambda ()
				 (org-superstar-mode)
				 (org-superstar-configure-like-org-bullets)))

  (use-package org-download
    :after org)

  (require 'calctex)
  (add-hook 'calc-embedded-new-formula-hook 'calctex-mode)

  (add-hook 'org-mode-hook 'turn-on-org-cdlatex)

  (require 'org-tree-slide)
#+END_SRC

** Org mode utilities
   I change some more things inside org to fix some annoying default behaviours.
   + When exporting to pdf, org defaults to your system's default pdf viewer (zathura in my case). Since I am in an Emacs buffer editing the file, its more convenient to open the pdf inside Emacs with pdf-tools.
   + I write a lot of equations in my documents usually with latex and the normal size of those inside org (available with org-latex-preview) is a bit small for my liking so after playing around with it a bit I scaled it up to 1.3 of the original which I consider a very sensible size
   + Making latex view my bibtex bibliography and export it properly. I took this from the org-ref docs as originally I wasnt getting proper bibliographic entries. I t works with this.
   + I tell org that its odt export should be converted to docx as if I am exporting to a rich text editors format, its for a collaboration and most people I know use that format. If its a personal project I always export to a latex pdf because it looks better.
   + Defining a function which supresses the confirmation message for tangling an org document's source code and hooking it to the after save hook in org-mode. If I understand it correctly, it should automatically tangle after saving, if thats possible, which is handy for things such as this configuration.
   + I have a custom lambda function which I hook to the org-mode-hook (so it activates every time a new org mode buffer is opened) which automatically displays images I have added to the buffer, creates previews for latex code in the document, toggles truncate-lines so that I can see the entire text when opening the buffer (really can't understand why its not nil by default in org documents) and activates tab-jump-out-mode so I can tab out of brackets/quotes etc. 
     
#+BEGIN_SRC elisp
  (add-to-list 'org-file-apps '("\\.pdf\\'" . emacs))

  (setq org-format-latex-options '(:foreground default :background default :scale 1.3 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers))

  (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))

  (setq org-odt-preferred-output-format "docx")

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'(lambda ()
								     (let ((org-confirm-babel-evaluate nil))
								       (org-babel-tangle))))
						'run-at-end 'only-in-org-mode))

  (add-hook 'org-mode-hook '(lambda ()
			      (toggle-truncate-lines)
			      (org-latex-preview)
			      (org-toggle-inline-images)
			      (tab-jump-out-mode)))

#+END_SRC

#+RESULTS:
| org-ref-org-menu | (lambda nil (toggle-truncate-lines) (org-latex-preview) (org-toggle-inline-images)) | (lambda nil (add-hook 'after-save-hook #'(lambda nil (let ((org-confirm-babel-evaluate nil)) (org-babel-tangle)))) 'run-at-end 'only-in-org-mode) | turn-on-org-cdlatex | (lambda nil (org-superstar-mode) (org-superstar-configure-like-org-bullets)) | evil-org-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | org-ref-setup-label-finders |
	    
** Org Noter
   
   Org-noter is an excellent program for annotating pdfs using org. Its main problem is that when you open it it creates its frame in a new emacs window which for me is inconvenient, so I change that behaviour to open the notes the current buffer. I also make another change. Because the typical file that includes a lot of org-noter annotations is crammed with :PROPERTIES: arguments I use a custom function to hide them. They can be useful so I dont hide them by default, but instead make the function interactive (can be called from M-x) and when given the 'all argument on the prompt hides all the :PROPERTIES: arguments. Below is the source code for these changes. Also, since I am not the one who wrote the function have a link to the stack-overflow page where this is answered [[https://stackoverflow.com/questions/17478260/completely-hide-the-properties-drawer-in-org-mode]]

   #+BEGIN_SRC elisp

     (setq org-noter-always-create-frame nil)

     (defun org-cycle-hide-drawers (state)
       "Hide all the :PROPERTIES: drawers when called with the 'all argument. Mainly for hiding them in crammed org-noter files"
       (interactive "MEnter 'all for hiding :PROPERTIES: drawers in an org buffer: ")
       (when (and (derived-mode-p 'org-mode)
		  (not (memq state '(overview folded contents))))
	 (save-excursion
	   (let* ((globalp (memq state '(contents all)))
		  (beg (if globalp
			 (point-min)
			 (point)))
		  (end (if globalp
			 (point-max)
			 (if (eq state 'children)
			   (save-excursion
			     (outline-next-heading)
			     (point))
			   (org-end-of-subtree t)))))
	     (goto-char beg)
	     (while (re-search-forward org-drawer-regexp end t)
	       (save-excursion
		 (beginning-of-line 1)
		 (when (looking-at org-drawer-regexp)
		   (let* ((start (1- (match-beginning 0)))
			  (limit
			    (save-excursion
			      (outline-next-heading)
				(point)))
			  (msg (format
				 (concat
				   "org-cycle-hide-drawers:  "
				   "`:END:`"
				   " line missing at position %s")
				 (1+ start))))
		     (if (re-search-forward "^[ \t]*:END:" limit t)
		       (outline-flag-region start (point-at-eol) t)
		       (user-error msg))))))))))

   #+END_SRC

   #+RESULTS:
   : org-cycle-hide-drawers

** Org Babel
More languages to evaluate with org-babel (by default, only elisp is evaluated). I dont use this extensively but for those times that I need to evaluate code in org, its probably going to be in one of these so might as well add them.

#+BEGIN_SRC elisp

  (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (python . t)
       (haskell . t)
       (octave . t)
       (latex . t)
       (gnuplot . t)
  )
     )

#+END_SRC

#+RESULTS:

** Org-agenda and TODOs
    I set everything I need for TODOs and the org-agenda in this section. In [[*Org mode keybindings][Org mode keybindings]] you can see the keybindings I have set for each action while here are the configurations I want to make. This helps keep this consistent by having those keybindings in that section. I track all my todo files in one directory, my org_roam directory (more on that in the next section, its an important part of my workflow). So I want every todo defined in that directory to be loaded inside Org-agenda.

   I define a custom function org-make-todo which makes an item todo, gives it a priority and effort value. I like this for initialization of a todo file as it helps with organizing tasks with which one is more urgent and which is harder outside of the already existing file system to manage different kinds of todos.

   I activate org-super-agenda which gives me very easy to use queries for anything you can think of. I use it in conjuction with org-agenda-custom-commands which allows me to define new agenda shortcuts within which I define my new custom queries, which fit my personal workflow. Also, because some of my todos are rather large I disable truncate lines inside the agenda buffer. This is supposed to be the default behaviour but for some reason agenda is disobedient.
   
#+BEGIN_SRC elisp

  (setq org-todo-keywords
	  '((sequence "TODO(t)"
		      "ACTIVE(a)"
		      "NEXT(n)"
		      "WAIT(w)"
		      "|"
		      "DONE(d@)"
		      "CANCELLED(c@)"
		      )))

    (setq org-agenda-files
	    '("~/org_roam"))

  (defun org-make-todo ()
    "Set todo keyword, priority, effort and tags for a todo item. This is very useful for initialising todo items"
    (interactive)
    (org-todo)
    (org-priority)
    (org-set-effort)
    (org-set-tags-command))

  (org-super-agenda-mode 1)

  (add-hook 'org-agenda-mode-hook 'toggle-truncate-lines)

  (setq org-agenda-custom-commands
	'(("q" "Quick Check for the day"
	   ((agenda "" ((org-agenda-span 'day)
			(org-super-agenda-groups
			 '((:name "Today"
				  :time-grid t
				  :date today
				  :scheduled today)))))
	   (alltodo "" ((org-agenda-overriding-header "")
			 (org-super-agenda-groups
			  '((:name "What I've been doing"
				   :todo "ACTIVE")
			    (:name "Plans for the foreseeable future"
				   :todo "NEXT")
			    (:name "You GOTTA check this one out"
				   :priority "A")
			    (:name "As easy as they get"
				   :effort< "0:10")
			    (:discard (:anything))))))))
	  ("u" "University Projects"
	   ((alltodo "" ((org-agenda-overriding-header "")
			 (org-super-agenda-groups
			  '((:name "Currently Working on"
				   :and (:tag "University" :todo "ACTIVE"))
			    (:name "This one's next (probably)"
				   :and (:priority "A" :tag "University"))
			    (:name "Medium Priority Projects"
				   :and (:tag "University" :priority "B"))
			    (:name "Trivial Projects, I'ma do them at some point though :D"
				   :and (:tag "University" :priority "C"))
			    (:discard (:not (:tag "University")))))))))
	  ("e" "Emacs Projects"
	   ((alltodo "" ((org-agenda-overriding-header "")
			 (org-super-agenda-groups
			  '((:name "Configuring Emacs, the Present"
				   :and (:tag "Emacs" :todo "ACTIVE")
				   :and (:tag "Emacs" :todo "NEXT"))
			    (:name "What to add, What to add??"
				   :and (:tag "Emacs" :priority "A"))
			    (:name "Wow, this one's easy, lets do it"
				   :and (:tag "Emacs" :effort< "0:15"))
			    (:discard (:not (:tag "Emacs")))
			    (:name "But wait, this was only the beginning. The real fun starts here!"
				   :anything)))))))))


#+END_SRC

#+RESULTS:
| s | Super Powered Agenda | ((agenda  ((org-agenda-span 'day) (org-super-agenda-groups '((:name Today :time-grid t :date today :scheduled today))))) (alltodo  ((org-agenda-overriding-header ) (org-super-agenda-groups '((:name What I've been doing :todo ACTIVE) (:name Plans for the foreseeable future :todo NEXT) (:name You GOTTA check this one out :priority A) (:name As easy as they get :effort< 0:10) (:discard (:anything)))))))                        |
| u | University Projects  | ((alltodo  ((org-agenda-overriding-header ) (org-super-agenda-groups '((:name Currently Working on :and (:tag University :todo ACTIVE)) (:name What you gonna start next (probably) :and (:priority A :tag University)) (:name Medium Priority Projects :and (:tag University :priority B)) (:name Trivial Projects, I'ma do them at some point :D :and (:tag University :priority C)) (:discard (:not (:tag University))))))))            |
| e | Emacs Projects       | ((alltodo  ((org-agenda-overriding-header ) (org-super-agenda-groups '((:name Configuring Emacs, the Present :and (:tag Emacs :todo ACTIVE) :and (:tag Emacs :todo NEXT)) (:name What to add, What to add?? :and (:tag Emacs :priority A)) (:name Wow, this one's easy, lets do it :and (:tag Emacs :effort< 0:15)) (:discard (:not (:tag Emacs))) (:name But wait, this was only the beginning. The real fun starts here! :anything)))))) |

* Org-Roam, References and the Zettelkasten Workflow
  This section is about my Org-roam setup and my reference management inside org. It is based on the slip-box (Zettelkasten) workflow. The packages that are most relevant to this are Org-roam (obviously) bibtex-completion (ivy-bibtex in my case), org-ref, Org-roam-bibtex. Org Roam is a tool which helps you create your own network of notes. Its based on the Zettelkasten method and the Roam Research website. Everything is linked with one another. Bibtex completion (and the existence of .bib files in general) as well as Org-ref help manage bibliographic references inside org. I use Zotero as my reference manager in which I gather my bibliographies. It exports a .bib file which these two use. Org Roam Bibtex (ORB) is a package that combines all of these to help you add citation links from org-ref inside an org-roam buffer. This section includes all the customisations and settings of these packages.
  As seen in the [[*Keybindings][Keybindings]] section of the config, Roam and the Reference system both use the "r" leader key. Outside of it being handy because both start with the letter r, I think this makes sense because they are two connected concepts in my opinion. Thats why they are also in the same heading here.

** Initialisation Variables
   This section is all about the initialisation of variables. These are essential for the packages to work most of the time. More in detail,
   - I define the org_roam directory
   - Activate org-roam and orb after emacs's init so I can use their commands from anywhere, anytime
   - Zotero exports a .bib file with all my references (the main way it "talks" to Emacs). I "tell" ivy-bibtex and org-ref the location of this file for usage in their various commands.
   - I allow ivy-bibtex to query by keywords or abstract. Can be useful
   - I then define the fields of a bibtex file that get queried to create a file with the notes of a reference and set the variable that controls if they should be used to true (already default behaviour though so not truly needed). These are defined here and then formatted in the orb-template. The third variable is about what extnsion the "file" section uses.
   - I define the directory in which org-roam-dailies should be put
   - Lastly, I make the default action of ivy-bibtex, inserting the citation of the chosen reference. Personally, its the action I use most as opening the link/pdf to the reference (which is the original default) is more easily done from Zotero imo. In Emacs I find more utility in inserting the citation in my own documents. 

   #+BEGIN_SRC elisp

     (setq org-roam-directory "~/org_roam")

     (add-hook 'after-init-hook 'org-roam-mode)
     (add-hook 'after-init-hook 'org-roam-bibtex-mode)

     (setq bibtex-completion-bibliography
	   '("~/org_roam/Zotero_library.bib"))
     (setq reftex-default-bibliography '("~/org_roam/Zotero_library.bib"))

     (setq bibtex-completion-additional-search-fields '(keywords abstract))

     (setq orb-preformat-keywords
	   '("citekey" "title" "author" "keywords" "abstract" "entry-type" "file")
	   orb-process-file-keyword t
	   orb-file-field-extensions '("pdf"))

     (setq org-roam-dailies-directory "~/org_roam/daily")

     (use-package org-ref
       :config (org-ref-ivy-cite-completion))

     (setq ivy-bibtex-default-action 'ivy-bibtex-insert-citation)

     (ivy-add-actions
      'ivy-bibtex
      '(("p" ivy-bibtex-open-any "Open pdf, url or DOI")))
    #+END_SRC

    #+RESULTS:

** Templates
   This section is about the various templates used by the org-roam workflow. These are orb-templates, org-roam-capture-templates, org-roam-dailies-capture-templates

   #+BEGIN_SRC elisp
     (setq orb-templates
	   '(("r" "ref" plain (function org-roam-capture--get-point)
	      ""
	      :file-name "${citekey}"
	      :head "#+TITLE: ${title}\nglatex\n#+ROAM_KEY: ${ref}

     ,* Ref Info
     :PROPERTIES:
     :Custom_ID: ${citekey}
     :AUTHOR: ${author}
     :NOTER_DOCUMENT: ${file} ;
     :END:
     ,#+BEGIN_abstract\n${abstract}\n#+END_abstract

     - tags ::
     - keywords :: ${keywords}")))

     (setq org-roam-capture-templates
	   '(("d" "default" plain (function org-roam-capture--get-point)
	     "%?"
	     :file-name "%<%d-%m-%Y_%H:%M>-${slug}"
	     :unnarrowed t
	     :head "#+title: ${title}\nglatex\n
     - tags ::  ")))

     (setq org-roam-dailies-capture-templates
	   '(("l" "lesson" entry
	      #'org-roam-capture--get-point
	      "* %?"
	      :file-name "daily/%<%Y-%m-%d>"
	      :head "#+title: Fleeting notes for %<%Y-%m-%d>\n"
	      :olp ("Lesson notes"))

	     ("b" "bibliography" entry
	      #'org-roam-capture--get-point
	      "* %?"
	      :file-name "daily/%<%Y-%m-%d>"
	      :head "#+title: Fleeting notes for %<%Y-%m-%d>\n"
	      :olp ("Notes on Articles, Books, etc."))

	     ("g" "general" entry
	      #'org-roam-capture--get-point
	      "* %?"
	      :file-name "daily/%<%Y-%m-%d>"
	      :head "#+title: Fleeting notes for %<%Y-%m-%d>\n"
	      :olp ("Random general notes"))

	     ("w" "workout" entry
	      #'org-roam-capture--get-point
	      "* %?"
	      :file-name "daily/%<%Y-%m-%d>"
	      :head "#+title: Fleeting notes for %<%Y-%m-%d>\n"
	      :olp ("Workout Regimes"))))

   #+END_SRC
   
   #+RESULTS:
   | l    | lesson                           | entry | #'org-roam-capture--get-point | * %? | :file-name | daily/%<%Y-%m-%d> | :head | #+title: Fleeting notes for %<%Y-%m-%d> |
   | :olp | (Lesson notes)                   |       |                               |      |            |                   |       |                                         |
   | b    | bibliography                     | entry | #'org-roam-capture--get-point | * %? | :file-name | daily/%<%Y-%m-%d> | :head | #+title: Fleeting notes for %<%Y-%m-%d> |
   | :olp | (Notes on Articles, Books, etc.) |       |                               |      |            |                   |       |                                         |
   | g    | general                          | entry | #'org-roam-capture--get-point | * %? | :file-name | daily/%<%Y-%m-%d> | :head | #+title: Fleeting notes for %<%Y-%m-%d> |
   | :olp | (Random general notes)           |       |                               |      |            |                   |       |                                         |
   | w    | workout                          | entry | #'org-roam-capture--get-point | * %? | :file-name | daily/%<%Y-%m-%d> | :head | #+title: Fleeting notes for %<%Y-%m-%d> |
   | :olp | (Workout Regimes)                |       |                               |      |            |                   |       |                                         |

* Inkscape x Emacs
  This ection is about integration of Emacs's org-mode with Inkscape. Essentially the first function, opens Inkscape, lets you draw whatever you desire and then creates a latex code area with the figure, ready to be imported. But, since saved the file as a .svg we need the second function, which exports the .svg to pdf so it can be imported properly to the Latex document Org exports.

  In a nutshell, you can use Inkscape to seamlessly create good looking graphs/shapes inside your org documents, which can prove very useful in some cases. I take no credit for this. I "stole" the idea from this excellent reddit post [[https://www.reddit.com/r/emacs/comments/lo9ov0/latex_export_with_inkscape_images_and_drawio/]]. I recommend you check that post out and not this section. The only problem I had with it is that the author initially planned for the second function to not be interactive but simply hooked to the org-export-before-processing-hook. This should work, but for some reason (at least in my config) this hook simply doesn't exist on startup creating an error while loading my init.el. After testing I noticed that if you export a file once in an emacs session, the hook is created and this works perfectly. But since I can't get it on startup and its tedious to do otherwise, I just made the function interactive so I can call it from the M-x menu and from a custom keybinding. If you however don't have this issue, the fix (as can be seen in the reddit post, which I recommend at least checking out) is removing the (interactive) (which isn't mandatory, but you wont need to call the function if its hooked to the correct hook) and adding a variable arg as the function's argument (this is needed for the hook to call the function correctly, but isn't needed if the function is called interactively).

  Big thanks to u/ozzopp on reddit for providing the source code for this as its truly amazing but something I couldn't have made on my own. 
  
  #+BEGIN_SRC elisp

    (defun org-inkscape-img ()
	(interactive "P")
	(setq string (read-from-minibuffer "Insert image name: "))
	;; if images folder not exists create it
	(setq dirname (concat (f-base (buffer-file-name)) "-org-img"))
	(if (not (file-directory-p dirname))
	    (make-directory dirname))
	 ;; if file doesn't exist create it
	 (if (not (file-exists-p (concat "./" dirname "/" string ".svg")))
	 (progn
	     (setq command (concat "echo " "'<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><svg xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\" xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\" width=\"164.13576mm\" height=\"65.105995mm\" viewBox=\"0 0 164.13576 65.105995\" version=\"1.1\" id=\"svg8\" inkscape:version=\"1.0.2 (e86c8708, 2021-01-15)\" sodipodi:docname=\"disegno.svg\"> <defs id=\"defs2\" /> <sodipodi:namedview id=\"base\" pagecolor=\"#ffffff\" bordercolor=\"#666666\" borderopacity=\"1.0\" inkscape:zoom=\"1.2541194\" inkscape:cx=\"310.17781\" inkscape:cy=\"123.03495\"z inkscape:window-width=\"1440\" inkscape:window-height=\"847\" inkscape:window-x=\"1665\" inkscape:window-y=\"131\" inkscape:window-maximized=\"1\"  inkscape:current-layer=\"svg8\" /><g/></svg>' >> " dirname "/" string ".svg; inkscape " dirname "/" string ".svg"))
		(shell-command command)
		(concat "#+begin_export latex\n\\begin{figure}\n\\centering\n\\def\\svgwidth{0.9\\columnwidth}\n\\import{" "./" dirname "/}{" string ".pdf_tex" "}\n\\end{figure}\n#+end_export"))
	    ;; if file exists opens it
	    (progn
		(setq command (concat "inkscape " dirname "/" string ".svg"))
		(shell-command command)
		(concat "" ""))))

    (add-to-list 'org-latex-packages-alist '("" "booktabs"))
    (add-to-list 'org-latex-packages-alist '("" "import"))

    (defun org-svg-pdf-export ()
      (interactive)
      (setq dirname (concat (f-base (buffer-file-name)) "-org-img"))
      (if (file-directory-p dirname)
	  (progn
	    (setq command (concat "/usr/bin/inkscape -D --export-latex --export-type=\"pdf\" " dirname "/" "*.svg"))
	    (shell-command command))))

    (defun svglatex (file_name)
      "Prompts for a file name (without any file prefix), takes an svg with that file name and exports the file as a latex compatible pdf file"
      (interactive "MEnter svg file name: ")
      (setq export (concat "inkscape -D " file_name".svg -o " file_name".pdf --export-latex"))
      (shell-command export))

  #+END_SRC

  #+RESULTS:
  : ad/svglatex
 
* Company
  Company is a minor mode, which I enable globally, which allows for autocompletions. This is useful when programming, or writing latex for completing what you want, but also can speed up the writing of long words. The lambda I add to the company-mode-hook adds latex autocompletions and allows them to be used anywhere. It also makes the minimum prefix 2 letters long, which is better than the default 3 imo, especially when auto completing latex. It also sets up company to read and give autocompletions for citations from my master .bib file in Zotero. I usually enter them with the ivy-bibtex package (my current default action is add citation there) but this is worth a try. 
  
  #+BEGIN_SRC elisp

    (add-hook 'after-init-hook 'global-company-mode)
    (add-hook 'company-mode-hook '(lambda ()
				    (add-to-list 'company-backends 'company-math-symbols-latex)
				    (setq company-math-allow-latex-symbols-in-faces t)
				    (add-to-list 'company-backends 'company-bibtex)
				    (setq company-bibtex-bibliography '("~/org_roam/Zotero_library.bib"))
				    (setq company-minimum-prefix-length 2)))


  #+END_SRC
  
  #+RESULTS:
  | ad/company-latex | (lambda nil (when company-backend company-math-symbols-latex (let (company-idle-delay 0.01)))) |
 
* Other Major Modes
Some other extensions inside my Emacs config that require some changes for their major modes to function as I want them. This currently includes:
- Ebuku
- PDF Tools
- Octave
- Emacs Application Framework
- Elisp
  
** Ebuku
  Ebuku is the Emacs major mode for buku, a simple terminal bookmark manager. Since I store all my bookmarks there, this gives me a way to launch my favourite pages from inside Emacs, which is a utility I deem very useful. For some reason, evil-collections keybindings didn't work by default so I enabled them manually (this is the first package I have had this happen to me with)

  #+BEGIN_SRC elisp
    (require 'ebuku)
    (require 'evil-collection-ebuku)

    (add-hook 'ebuku-mode-hook 'evil-collection-ebuku-setup)
  #+END_SRC
  
** PDF Tools

Configuration for PDF-tools, my favourite built-in Emacs pdf viewer. I set it as the default pdf viewer for Emacs and enable the midnight minor mode for it as it makes it match my theme.

#+BEGIN_SRC elisp

    (use-package pdf-tools
      :mode (("\\.pdf\\'" . pdf-view-mode))
      :config
      ;(define-key pdf-view-mode-map [remap quit-window] #'kill-current-buffer)
      (progn
	(pdf-tools-install))
      )

  (add-hook 'pdf-view-mode-hook 'pdf-view-midnight-minor-mode)
#+END_SRC

#+RESULTS:
| pdf-tools-enable-minor-modes | pdf-view-midnight-minor-mode |

And after these changes, my emacs pdf-viewer looks like this. I didn't know what pdf to use so I put a LibreTexts document for Equations of States, which is close to my studies. xDD
[[https://github.com/AuroraDragoon/Dotfiles/blob/master/screenshots/pdf_view.png]]

** Octave
   Octave is a very powerful piece of software for mathematical computations. You can edit octave scripts inside of Emacs and also run an instance of Octave to execute them. But I ran into some problems with it. Some files with the .m extension weren't being opened in the Octave major mode, so I fix that.
   Furthermore, it was inconvenient for Octave to open in my current working directory so when I launch it I want to automatically cd to the directory holding all my Octave scripts. For this one I needed to create an "init_octave.m" file inside my .emacs.d which octave always reads when starting inside Emacs. Inside it you just cd to "home/your_user_name/Documents/Octave". For some reason it didnt recognize ~ as my home directory so I needed to add the full path. You can find the file inside this repo.

   #+BEGIN_SRC elisp
      (add-to-list 'auto-mode-alist '("\\.m\\'" . octave-mode))
   #+END_SRC
   
** Emacs Application Framework
  
     EAF is a very promising package for Emacs giving it some useful gui apps that are not so easy to find in other packages (such as a browser) and in general a full suite of applications. Unfortunately its got a weird behaviour in tiling window managers such as i3 and qtile, which I use not allowing me to use Emacs commands inside its buffers. It seems that when the cursor is outside the Emacs buffer (in my bar) this fixes but its still annoying so its use is limited unfortunately.

   #+BEGIN_SRC elisp
     (require 'eaf)

     (require 'eaf-evil)

     (setq eaf-wm-focus-fix-wms '("qtile"))

   #+END_SRC
  
** Elisp
   Elisp is the internal language of Emacs. I enable eldoc-mode in Elisp and ielm which is just awesome for writing elisp. 
   
   #+BEGIN_SRC elisp

     (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
     (add-hook 'ielm-mode-hook 'eldoc-mode)

   #+END_SRC
* Custom Variables
These are some variables automatically generated by the "M-x customize" menu. Its better not to play around with this section of the config file as to not mess something up accidentally. 

#+BEGIN_SRC elisp
;; CUSTOM VARIABLES
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '("0fffa9669425ff140ff2ae8568c7719705ef33b7a927a0ba7c5e2ffcfac09b75" default))
 '(package-selected-packages
   '(evil-collection openwith sequences cl-lib-highlight helm-system-packages async-await popup-complete helm-fuzzy-find evil-space yapfify yaml-mode ws-butler winum which-key web-mode web-beautify vterm volatile-highlights vi-tilde-fringe uuidgen use-package toc-org tagedit spaceline solarized-theme slim-mode scss-mode sass-mode restart-emacs request rainbow-delimiters pyvenv pytest pyenv-mode py-isort pug-mode pspp-mode popwin pip-requirements persp-mode pcre2el paradox org-projectile-helm org-present org-pomodoro org-mime org-download org-bullets open-junk-file neotree move-text mmm-mode markdown-toc magit macrostep lorem-ipsum livid-mode live-py-mode linum-relative link-hint json-mode js2-refactor js-doc intero indent-guide hy-mode hungry-delete htmlize hlint-refactor hl-todo hindent highlight-parentheses highlight-numbers highlight-indentation helm-themes helm-swoop helm-pydoc helm-projectile helm-mode-manager helm-make helm-hoogle helm-flx helm-descbinds helm-css-scss helm-ag haskell-snippets gruvbox-theme google-translate golden-ratio gnuplot gh-md flx-ido fill-column-indicator fancy-battery eyebrowse expand-region exec-path-from-shell evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-surround evil-search-highlight-persist evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-lisp-state evil-indent-plus evil-iedit-state evil-exchange evil-escape evil-ediff evil-args evil-anzu eval-sexp-fu emmet-mode elisp-slime-nav dumb-jump diminish define-word cython-mode csv-mode company-ghci company-ghc column-enforce-mode coffee-mode cmm-mode clean-aindent-mode auto-highlight-symbol auto-compile auctex-latexmk anaconda-mode aggressive-indent adaptive-wrap ace-window ace-link ace-jump-helm-line)))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

#+END_SRC


#+RESULTS:
Wrong type argument: integer-or-marker-p, nil t quit-window kill

